on:
  pull_request:
    branches: 
      - 'main'

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

jobs:
  plan-dev:
    name: 'terraform plan dev'
    runs-on: ubuntu-latest
    env: 
      Tf_WORKING_DIR: '.'

    defaults:
      run:
        shell: bash
        working-directory: ${{ env.Tf_WORKING_DIR }}

    steps:
      - uses: actions/checkout@v2

      - uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.1.8
      - id: fmt
        run: terraform fmt -check
      - id: init
        run: terraform init -backend=true -backend-config="config/local/backend.hcl"
      - id: validate
        run: terraform validate -no-color
      - id: plandev
        run: terraform plan -no-color -var-file="config/dev/terraform.tfvars"

      - uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            <details><summary>Validation Output for Development</summary>
      
            \`\`\`\n
            ${{ steps.validate.outputs.stdout }}
            \`\`\`
      
            </details>
      
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
            
            <details><summary>Show Plan</summary>
            
            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`
            
            </details>
            
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;
              
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

  plan-prod:
    name: 'terraform plan prod'
    runs-on: ubuntu-latest
    env: 
      Tf_WORKING_DIR: '.'

    defaults:
      run:
        shell: bash
        working-directory: ${{ env.Tf_WORKING_DIR }}

    steps:
      - uses: actions/checkout@v2
      
      - uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.1.8
      - id: fmt
        run: terraform fmt -check
      - id: init
        run: terraform init -backend=true -backend-config="config/local/backend.hcl"
      - id: validate
        run: terraform validate -no-color
      - id: plandev
        run: terraform plan -no-color -var-file="config/prod/terraform.tfvars"

      - uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            <details><summary>Validation Output for Production</summary>
      
            \`\`\`\n
            ${{ steps.validate.outputs.stdout }}
            \`\`\`
      
            </details>
      
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
            
            <details><summary>Show Plan</summary>
            
            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`
            
            </details>
            
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;
              
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })