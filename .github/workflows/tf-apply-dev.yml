on:
  push:
    branches: 
      - 'none'

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

jobs:
  apply-dev:
    name: 'terraform apply dev'
    runs-on: ubuntu-latest
    env: 
      Tf_WORKING_DIR: '.'

    defaults:
      run:
        shell: bash
        working-directory: ${{ env.Tf_WORKING_DIR }}

    steps:
      - uses: actions/checkout@v2

      - uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.1.8
      - id: fmt
        run: terraform fmt -check
      - id: init
        run: terraform init -backend=true -backend-config="config/dev/backend.hcl"
      - id: validate
        run: terraform validate -no-color
      - id: applydev
        run: terraform apply -auto-approve -var-file="config/dev/terraform.tfvars" -lock="false"

      - uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          DESTROY: "terraform\n${{ steps.apply.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            <details><summary>Validation Output for Development</summary>
      
            \`\`\`\n
            ${{ steps.validate.outputs.stdout }}
            \`\`\`
      
            </details>
      
            #### Terraform Apply üìñ\`${{ steps.apply.outcome }}\`
            
            <details><summary>Show Apply</summary>
            
            \`\`\`\n
            ${process.env.APPLY}
            \`\`\`
            
            </details>
            
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;
              
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

  apply-prod:
    name: 'terraform apply prod'
    runs-on: ubuntu-latest
    env: 
      Tf_WORKING_DIR: '.'

    defaults:
      run:
        shell: bash
        working-directory: ${{ env.Tf_WORKING_DIR }}

    steps:
      - uses: actions/checkout@v2
      
      - uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.1.8
      - id: fmt
        run: terraform fmt -check
      - id: init
        run: terraform init -backend=true -backend-config="config/prod/backend.hcl"
      - id: validate
        run: terraform validate -no-color
      - id: applyprod
        run: terraform apply -auto-approve -var-file="config/prod/terraform.tfvars" -lock="false"

      - uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          DESTROY: "terraform\n${{ steps.apply.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            <details><summary>Validation Output for Production</summary>
      
            \`\`\`\n
            ${{ steps.validate.outputs.stdout }}
            \`\`\`
      
            </details>
      
            #### Terraform Apply üìñ\`${{ steps.apply.outcome }}\`
            
            <details><summary>Show Apply</summary>
            
            \`\`\`\n
            ${process.env.APPLY}
            \`\`\`
            
            </details>
            
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;
              
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })